{"version":3,"sources":["common/logo.svg","common/GeneralSpinner.js","common/ListLoader.js","albumList/Album.js","albumList/AlbumList.js","albumList/AlbumListContainer.js","albumList/iTunesAlbumsApi.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","rotate360","keyframes","Spinner","styled","span","p","cycleTime","children","ListLoader","div","SpinnedImage","img","src","reactLogo","className","alt","Album","CoverImg","Header","Title","Artist","data","title","label","artist","image50PxUrl","List","albums","map","album","i","key","rawData","useFetch","isLoading","albumListData","undefined","feed","err","entry","content","AlbumList","AppHeading","App","AlbumListContainer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4HAAAA,EAAOC,QAAU,IAA0B,kC,sgBCG3C,IAAMC,EAAYC,YAAH,KAKTC,EAAUC,IAAOC,KAAV,IAEEJ,GACQ,SAAAK,GAAC,OAAEA,EAAEC,aAIb,cAAmC,IAAjCC,EAAgC,EAAhCA,SAAgC,IAAtBD,iBAAsB,MAAV,KAAU,EAC/C,OACE,kBAACJ,EAAD,CAASI,UAAWA,GAAYC,I,2PCZpC,IAAMC,EAAaL,IAAOM,IAAV,KAMVC,EAAeP,IAAOQ,IAAV,KAMH,aACb,OACE,kBAACH,EAAD,KACE,6BACE,kBAAC,EAAD,CAASF,UAAU,QACjB,kBAACI,EAAD,CAAcE,IAAKC,IAAWC,UAAU,WAAWC,IAAI,WAH7D,e,84BChBJ,IAAMC,EAAQb,IAAOM,IAAV,KAKLQ,EAAWd,IAAOQ,IAAV,KAORO,EAASf,IAAOM,IAAV,KAINU,EAAQhB,IAAOM,IAAV,KAMLW,EAASjB,IAAOM,IAAV,KASG,cAAe,IAAZY,EAAW,EAAXA,KACVC,EAAQD,EAAK,WAAWE,MACxBC,EAASH,EAAK,aAAaE,MAC3BE,EAAeJ,EAAK,YAAY,GAAGE,MAEzC,OACE,kBAACP,EAAD,KACE,kBAACC,EAAD,CAAUL,IAAKa,IACf,kBAACP,EAAD,KACE,kBAACC,EAAD,KAAQG,GACR,kBAACF,EAAD,KAASI,M,wFCxCjB,IAAME,EAAOvB,IAAOM,IAAV,KAIK,cAAe,IAEtBkB,EAFqB,EAAXN,KAEIO,KAAI,SAACC,EAAOC,GAC9B,OAAO,kBAAC,EAAD,CAAOC,IAAKD,EAAGT,KAAMQ,OAG9B,OACE,kBAACH,EAAD,KACGC,ICVQ,iBAAO,ICNIK,EDML,EACUC,IAAS,4DAA9BC,EADW,EACXA,UAAWb,EADA,EACAA,KACbc,OCPUC,KADQJ,EDQQX,GCPE,QACRe,IAAjBJ,EAAQK,KAA2B,CAACC,IAAK,0BAC3CN,EAAQK,KAAKE,MDMdC,EAAUN,EAAY,kBAAC,EAAD,MAAgB,kBAACO,EAAD,CAAWpB,KAAMc,IAE7D,OACE,6BAAMK,I,uGEPV,IAAME,EAAavC,IAAOM,IAAV,KAeDkC,MAXf,WACE,OACE,6BACE,4BAAQ7B,UAAU,cAChB,kBAAC4B,EAAD,8BACA,kBAACE,EAAD,SCFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f7bfacce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b095188b.svg\";","import React from 'react'\nimport styled, {keyframes} from 'styled-components';\n\nconst rotate360 = keyframes`\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n`;\n\nconst Spinner = styled.span`\n  display: flex;\n  animation: ${rotate360} cubic-bezier(0, 0.2, 0.8, 1) infinite;\n\tanimation-duration: ${p=>p.cycleTime};\n`;\n\n// hint: provide fixed height & width for children in order to avoid parent stretching during rotation.\nexport default ({children, cycleTime = '1s'}) => {\n  return (\n    <Spinner cycleTime={cycleTime}>{children}</Spinner>\n  )\n}","import React from \"react\";\nimport styled from 'styled-components';\nimport Spinner from '../common/GeneralSpinner'\nimport reactLogo from \"./logo.svg\";\n\nconst ListLoader = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 30px;\n`;\n\nconst SpinnedImage = styled.img`\n  width: 50px;\n  height: 50px;\n`;\n\n\nexport default () => {\n  return (\n    <ListLoader>\n      <div>\n        <Spinner cycleTime=\"0.5s\">\n          <SpinnedImage src={reactLogo} className=\"App-logo\" alt=\"logo\"/>\n        </Spinner>\n      </div>\n      ...loading\n    </ListLoader>\n  )\n}","import React from 'react';\nimport styled from 'styled-components';\n\nconst Album = styled.div`\n  display: flex;\n  margin-bottom: 30px;\n`;\n\nconst CoverImg = styled.img`\n  width: 55px;\n  max-height: 77px;\n  border-radius: 6px;\n  border: .5px solid rgba(0,0,0,.1);\n`;\n\nconst Header = styled.div`\n  margin-left: 20px;\n`;\n\nconst Title = styled.div`\n  font-size: 1em;\n  font-weight: 400;\n  font-family: \"SF Pro Display\",\"SF Pro Icons\",\"Apple WebExp Icons Custom\",\"Helvetica Neue\",Helvetica,Arial,sans-serif;\n`;\n\nconst Artist = styled.div`\n  font-size: 18px;\n  line-height: 1.2223;\n  font-weight: 400;\n  letter-spacing: .027em;\n  font-family: \"SF Pro Display\",\"SF Pro Icons\",\"Apple WebExp Icons Custom\",\"Helvetica Neue\",Helvetica,Arial,sans-serif;\n  color: #8e8e93;\n`;\n\nexport default ({ data }) => {\n  const title = data['im:name'].label;\n  const artist = data['im:artist'].label;\n  const image50PxUrl = data['im:image'][0].label;\n\n  return (\n    <Album>\n      <CoverImg src={image50PxUrl}/>\n      <Header>\n        <Title>{title}</Title>\n        <Artist>{artist}</Artist>\n      </Header>\n    </Album>\n  );\n};\n\n\n\n\n","import React from 'react';\nimport styled from 'styled-components';\nimport Album from './Album.js';\n\nconst List = styled.div`\n  margin: 20px;\n`;\n\nexport default ({ data }) => {\n\n  const albums = data.map((album, i) => {\n    return <Album key={i} data={album}/>\n  });\n\n  return (\n    <List>\n      {albums}\n    </List>\n  );\n};\n\n\n\n\n","import React from \"react\";\nimport useFetch from \"react-fetch-hook\";\nimport ListLoader from '../common/ListLoader.js'\nimport AlbumList from \"./AlbumList.js\";\nimport {albumList} from \"./iTunesAlbumsApi.js\";\n\nexport default () => {\n  const { isLoading, data  } = useFetch(\"https://itunes.apple.com/us/rss/topalbums/limit=100/json\");\n  const albumListData = albumList(data);\n  const content = isLoading ? <ListLoader/> : <AlbumList data={albumListData}/>;\n\n  return (\n    <div>{content}</div>\n  )\n}","export function albumList(rawData) {\n  if (rawData === undefined) return [];\n  else if (rawData.feed === undefined) return {err: 'unexpected data format'}; // TODO: support error handling in presentation\n  return rawData.feed.entry\n}","import React from 'react';\nimport styled from 'styled-components';\nimport './App.css';\nimport AlbumListContainer from './albumList/AlbumListContainer.js';\n\nconst AppHeading = styled.div`\n  margin: 20px 20px 40px 20px;\n`;\n\nfunction App() {\n  return (\n    <div>\n      <header className=\"App-header\">\n        <AppHeading>iTunes Top 100 Albums</AppHeading>\n        <AlbumListContainer />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}